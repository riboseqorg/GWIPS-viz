var pt=React.PropTypes;var RegionOrGenome=React.createClass({displayName:"RegionOrGenome",mixins:[PathUpdate,ImmutableUpdate],propTypes:{positionInfo:pt.object.isRequired,db:pt.string},menuOptions:Immutable.fromJS([{label:"position or search term",value:"position"},{label:"genome",value:"genome"}]),render:function(){var props=this.props;var posInfo=props.positionInfo;var positionInput=null;if(posInfo.get("hgai_range")!=="genome"){positionInput=React.createElement(PositionSearch,{positionInfo:posInfo,className:"sectionItem",db:props.db,path:props.path,update:props.update})}return React.createElement("div",{className:"sectionRow"},React.createElement(LabeledSelect,{label:"region to annotate",className:"sectionItem",selected:posInfo.get("hgai_range"),options:this.menuOptions,update:props.update,path:props.path.concat("hgai_range")}),positionInput)}});var LabeledSelectRow=React.createClass({displayName:"LabeledSelectRow",mixins:[PathUpdate,ImmutableUpdate],propTypes:{descriptors:pt.object.isRequired},makeMenuFromDescriptor:function(descriptor,ix){if(!descriptor||descriptor.get("hide")){return null}else{var key="lsrMenu"+ix;return React.createElement(LabeledSelect,{label:descriptor.get("label"),selected:descriptor.get("selected"),options:descriptor.get("valLabels"),key:key,className:"sectionItem",update:this.props.update,path:this.props.path.concat(ix)})}},render:function(){var descriptors=this.props.descriptors;return React.createElement("div",{className:"sectionRow sectionItem"},descriptors.map(this.makeMenuFromDescriptor).toJS())}});function makeSchemaLink(schemaUrl){if(schemaUrl){return React.createElement("span",{className:"smallText sectionItem"},React.createElement("a",{href:schemaUrl,target:"ucscSchema",title:"Open table schema in new window"},"View table schema"))}else{return null}}var AddDataSource=React.createClass({displayName:"AddDataSource",mixins:[PathUpdate,ImmutableUpdate],propTypes:{addDsInfo:pt.object.isRequired},onAdd:function(){this.props.update(this.props.path.concat("addDataSource"))},onTrackHubs:function(){this.props.update(this.props.path.concat("trackHubs"))},onCustomTracks:function(){this.props.update(this.props.path.concat("customTracks"))},render:function(){var path=this.props.path||[];var addDsInfo=this.props.addDsInfo;if(!(addDsInfo&&addDsInfo.size)){return React.createElement(Icon,{type:"spinner"})}var schemaLink=makeSchemaLink(addDsInfo.get("schemaUrl"));return React.createElement("div",null,React.createElement("div",{className:"bigBoldText sectionRow"},"Add Data Source"),React.createElement(LabeledSelectRow,{descriptors:addDsInfo.get("menus"),path:path.concat("addDsMenuSelect"),update:this.props.update}),schemaLink,React.createElement("input",{type:"button",value:"Add",disabled:addDsInfo.get("disabled"),onClick:this.onAdd}),React.createElement("br",null),React.createElement("div",{className:"sectionRow"},"get more data:",React.createElement("br",null),React.createElement("input",{type:"button",value:"track hubs",onClick:this.onTrackHubs}),React.createElement("input",{type:"button",value:"custom tracks",onClick:this.onCustomTracks})))}});var FieldSelect=React.createClass({displayName:"FieldSelect",mixins:[PathUpdate,ImmutableUpdate],propTypes:{fieldInfo:pt.object},makeCheckboxGrid:function(table,fields){return _.map(fields,function(checked,field){var path=this.props.path||[];path=path.concat(table,field,"checked");return React.createElement(CheckboxLabel,{key:table+"."+field,checked:checked,label:field,path:path,update:this.props.update})},this)},makeTableSections:function(){var fieldInfo=this.props.fieldInfo.toJS();return _.map(fieldInfo,function(info,table){return React.createElement("div",{key:table},React.createElement("h3",null,info.label),React.createElement(SetClearButtons,{path:this.props.path.concat(table),update:this.props.update}),this.makeCheckboxGrid(table,info.fields))},this)},onDone:function(){this.props.update(this.props.path.concat("remove"))},render:function(){if(this.props.fieldInfo){var title=React.createElement("div",{className:"bigBoldText sectionRow"},"Choose fields");return React.createElement(Modal,{title:title,path:this.props.path,update:this.props.update},this.makeTableSections(),React.createElement("br",null),React.createElement("input",{type:"button",value:"Done",onClick:this.onDone}))}else{return null}}});var OutFileOptions=React.createClass({displayName:"OutFileOptions",mixins:[PathUpdate,ImmutableUpdate],propTypes:{options:pt.object,fieldInfo:pt.object,showLoadingImage:pt.bool,disableGetOutput:pt.bool,disableGetOutputMessage:pt.node},getDefaultProps:function(){return{showLoadingImage:false}},onChooseFields:function(){var path=this.props.path||[];this.props.update(path.concat("chooseFields"))},onGetOutput:function(){var path=this.props.path||[];this.props.update(path.concat("getOutput"))},render:function(){var doFile=this.props.options.get("doFile");var fileName=this.props.options.get("fileName");var doGzip=this.props.options.get("doGzip");var path=this.props.path||[];var fileInputDisplay=doFile?"inline-block":"none";if(this.props.disableGetOutput){return this.props.disableGetOutputMessage}return React.createElement("div",null,React.createElement("div",{className:"sectionRow"},React.createElement(CheckboxLabel,{checked:doFile,label:"Send output to file",className:"sectionItem",path:path.concat("doFile"),update:this.props.update}),React.createElement("div",{style:{display:fileInputDisplay}},React.createElement("span",{className:"sectionItem"},"name:"),React.createElement("span",{className:"sectionItem"},React.createElement(TextInput,{value:fileName,path:path.concat("fileName"),update:this.props.update,size:75})),React.createElement(CheckboxLabel,{checked:doGzip,label:"Compress with gzip (.gz)",className:"sectionItem",path:path.concat("doGzip"),update:this.props.update}))),React.createElement("div",{className:"sectionRow"},React.createElement("input",{type:"button",value:"Choose fields...",onClick:this.onChooseFields})),React.createElement(FieldSelect,{fieldInfo:this.props.fieldInfo,update:this.props.update,path:path.concat("fieldSelect")}),React.createElement("div",{className:"sectionRow"},React.createElement("br",null),React.createElement("input",{type:"button",value:"Get output",onClick:this.onGetOutput})),React.createElement(LoadingImage,{loading:this.props.showLoadingImage}))}});var QueryBuilder=React.createClass({displayName:"QueryBuilder",mixins:[PathUpdate,ImmutableUpdate],propTypes:{querySpec:pt.object,addDsInfo:pt.object,tableFields:pt.object,showLoadingImage:pt.bool},renderDataSource:function(dataSource,i){var dsKey="ds"+i;var path=["dataSources",i];var schemaLink=makeSchemaLink(dataSource.get("schemaUrl"));return React.createElement("div",{key:dsKey,className:"dataSourceSubsection"},React.createElement("div",{className:"sortHandle"},React.createElement("span",{className:"floatLeft"},React.createElement(Icon,{type:"upDown",className:"sectionItem"}),React.createElement("span",{className:"bigBoldText sectionItem"},dataSource.get("label")),React.createElement("span",{className:"sectionItem"},schemaLink)),React.createElement(Icon,{type:"x",className:"floatRight",update:this.props.update,path:path.concat("remove")}),React.createElement("div",{className:"clear"})))},renderDataSources:function(dataSources){if(dataSources&&dataSources.size){return React.createElement(Sortable,{sortableConfig:{handle:".sortHandle",axis:"y"},path:["dataSources","reorder"],update:this.props.update,className:"subsectionBox"},dataSources.map(this.renderDataSource).toJS())}else{return React.createElement("div",{className:"subsectionBox"},React.createElement("span",{className:"disabledMessage"},"please add at least one data source"))}},render:function(){var addDsInfo=this.props.addDsInfo;var querySpec=this.props.querySpec;if(!(addDsInfo&&querySpec)){return React.createElement(Section,{title:"Loading..."})}else{var dataSources=querySpec.get("dataSources");var outputInfo=querySpec.get("outFileOptions")||Immutable.Map();var tableFields=this.props.tableFields;var disableGetOutput=!(dataSources&&dataSources.size);var disableGetOutputMessage=React.createElement("span",{className:"disabledMessage"},"At least one data source must be added.");return React.createElement("div",null,React.createElement(Section,{title:"Configure Data Sources"},this.renderDataSources(dataSources),React.createElement(AddDataSource,{addDsInfo:addDsInfo,path:[],update:this.props.update})),React.createElement(Section,{title:"Output Options"},React.createElement(OutFileOptions,{options:outputInfo,fieldInfo:tableFields,showLoadingImage:this.props.showLoadingImage,disableGetOutput:disableGetOutput,disableGetOutputMessage:disableGetOutputMessage,path:["outFileOptions"],update:this.props.update})))}}});var DbPosAndQueryBuilder=React.createClass({displayName:"DbPosAndQueryBuilder",mixins:[PathUpdate,ImmutableUpdate],propTypes:{cladeOrgDbInfo:pt.object,positionInfo:pt.object,querySpec:pt.object,addDsInfo:pt.object,tableFields:pt.object,showLoadingImage:pt.bool},render:function(){var path=this.props.path;var cladeOrgDbInfo=this.props.cladeOrgDbInfo;if(!cladeOrgDbInfo){return React.createElement(Section,{title:"Loading..."})}else{return React.createElement("div",null,React.createElement(Section,{title:"Select Genome Assembly and Region"},React.createElement(CladeOrgDb,{menuData:cladeOrgDbInfo,path:path.concat("cladeOrgDb"),update:this.props.update}),React.createElement(RegionOrGenome,{positionInfo:this.props.positionInfo,db:cladeOrgDbInfo.get("db"),path:path.concat("positionInfo"),update:this.props.update})),React.createElement(QueryBuilder,{addDsInfo:this.props.addDsInfo,querySpec:this.props.querySpec,tableFields:this.props.tableFields,showLoadingImage:this.props.showLoadingImage,path:path,update:this.props.update}))}}});var AppComponent=React.createClass({displayName:"AppComponent",mixins:[ImmutableUpdate],getDefaultProps:function(){return{path:[]}},render:function(){var appState=this.props.appState;var appStateJS=appState.toJS();console.log("top-level render:",appStateJS);var path=this.props.path;var helpText=appState.get("helpText")||"";return React.createElement("div",{className:"sectionContents"},React.createElement("span",{className:"bigBoldText sectionRow sectionItem"},"Annotation Integrator"),React.createElement("input",{type:"button",value:"Undo",onClick:this.props.undo,disabled:!appState.get("canUndo")}),React.createElement("input",{type:"button",value:"Redo",onClick:this.props.redo,disabled:!appState.get("canRedo")}),React.createElement(DbPosAndQueryBuilder,{cladeOrgDbInfo:appState.get("cladeOrgDb"),positionInfo:appState.get("positionInfo"),addDsInfo:appState.get("addDsInfo"),querySpec:appState.get("hgai_querySpec"),tableFields:appState.get("tableFields"),showLoadingImage:appState.get("showLoadingImage"),path:path,update:this.props.update}),React.createElement(Section,{title:"Using the Annotation Integrator"},React.createElement("div",{dangerouslySetInnerHTML:{__html:helpText}})))}});AppComponent=AppComponent;